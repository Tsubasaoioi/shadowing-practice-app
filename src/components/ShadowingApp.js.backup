import React, { useState, useRef, useEffect } from 'react';
import { Button } from './ui/button';
import { Textarea } from './ui/textarea';
import { Input } from './ui/input';
import { Upload, Rewind, FastForward, Play, Pause } from 'lucide-react';

const ShadowingApp = () => {
  const [videoSrc, setVideoSrc] = useState('');
  const [isPlaying, setIsPlaying] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [japaneseTranslation, setJapaneseTranslation] = useState('');
  const [progress, setProgress] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [currentTranscript, setCurrentTranscript] = useState('');
  
  const videoRef = useRef(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    // ... (既存のコード)
  }, []);

  const handleFileUpload = (event) => {
    // ... (既存のコード)
  };

  const togglePlay = () => {
    // ... (既存のコード)
  };

  const rewind = (seconds) => {
    if (videoRef.current) {
      videoRef.current.currentTime -= seconds;
    }
  };

  const fastForward = (seconds) => {
    if (videoRef.current) {
      videoRef.current.currentTime += seconds;
    }
  };

  const formatTime = (time) => {
    // ... (既存のコード)
  };

  return (
    <div className="max-w-6xl mx-auto p-4 sm:p-6 md:p-8 bg-[#EFF2F9] text-[#6E7F8D]">
      <h1 className="text-xl sm:text-2xl font-bold mb-4 text-[#6E7F8D]">シャドーイング練習アプリ</h1>
      
      <div className="flex flex-col md:flex-row gap-4">
        {/* 左側: 動画とコントロール */}
        <div className="md:w-1/2">
          <label htmlFor="file-upload" className="cursor-pointer">
            <div className="flex items-center justify-center w-full h-12 bg-[#E4EBF1] rounded-md mb-2 hover:bg-[#D5E0E9] transition-colors">
              <Upload className="mr-2" size={20} />
              <span>動画をアップロード</span>
            </div>
          </label>
          <Input 
            id="file-upload"
            type="file" 
            accept="video/*" 
            onChange={handleFileUpload} 
            ref={fileInputRef}
            className="hidden"
          />
          {videoSrc ? (
            <video ref={videoRef} className="w-full mb-2 rounded-md" controls>
              <source src={videoSrc} type="video/mp4" />
              お使いのブラウザは動画タグをサポートしていません。
            </video>
          ) : (
            <div className="bg-[#E4EBF1] w-full h-48 flex items-center justify-center text-[#6E7F8D] mb-2 rounded-md">
              動画をアップロードしてください
            </div>
          )}
          
          <div className="mb-2">
            <div className="bg-[#E4EBF1] h-2 rounded-full">
              <div
                className="bg-[#B5BFC6] h-2 rounded-full"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <div className="text-sm mt-1">
              {formatTime(currentTime)} / {formatTime(duration)}
            </div>
          </div>

          <div className="flex flex-wrap justify-center gap-2 mb-4">
            <Button onClick={() => rewind(5)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <Rewind size={16} className="mr-1" /> 5
            </Button>
            <Button onClick={() => rewind(3)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <Rewind size={16} className="mr-1" /> 3
            </Button>
            <Button onClick={() => rewind(2)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <Rewind size={16} className="mr-1" /> 2
            </Button>
            <Button onClick={() => rewind(1)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <Rewind size={16} className="mr-1" /> 1
            </Button>
            <Button onClick={togglePlay} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              {isPlaying ? <Pause size={16} /> : <Play size={16} />}
            </Button>
            <Button onClick={() => fastForward(1)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <FastForward size={16} className="mr-1" /> 1
            </Button>
            <Button onClick={() => fastForward(2)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <FastForward size={16} className="mr-1" /> 2
            </Button>
            <Button onClick={() => fastForward(3)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <FastForward size={16} className="mr-1" /> 3
            </Button>
            <Button onClick={() => fastForward(5)} className="bg-[#E4EBF1] text-[#6E7F8D] hover:bg-[#D5E0E9]">
              <FastForward size={16} className="mr-1" /> 5
            </Button>
          </div>

          <div>
            <label className="block mb-2 font-bold text-sm sm:text-base">現在の文字起こし:</label>
            <p className="bg-[#E4EBF1] p-2 rounded-md">{currentTranscript}</p>
          </div>
        </div>

        {/* 右側: 文字起こしと翻訳 */}
        <div className="md:w-1/2 space-y-4">
          <div>
            <label className="block mb-2 font-bold text-sm sm:text-base">文字起こし（編集可能）:</label>
            <Textarea
              value={transcript}
              onChange={(e) => setTranscript(e.target.value)}
              placeholder="ここに文字起こしを入力してください"
              className="w-full h-40 sm:h-48 bg-[#E4EBF1] text-[#6E7F8D]"
            />
          </div>
          
          <div>
            <label className="block mb-2 font-bold text-sm sm:text-base">日本語訳:</label>
            <Textarea
              value={japaneseTranslation}
              onChange={(e) => setJapaneseTranslation(e.target.value)}
              placeholder="ここに日本語訳を入力してください"
              className="w-full h-40 sm:h-48 bg-[#E4EBF1] text-[#6E7F8D]"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default ShadowingApp;